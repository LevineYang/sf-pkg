/**
 * @file 
 * @author Denise Ratasich
 * @date 26.12.2013
 *
 * @brief Header file of confidence-weighted averaging.
 */

#ifndef __ESTIMATION_CONFIDENCE_WEIGHTED_AVERAGING_H__
#define __ESTIMATION_CONFIDENCE_WEIGHTED_AVERAGING_H__

#include "estimation/IEstimator.h"
#include "estimation/Input.h"
#include "estimation/Output.h"

namespace estimation 
{
  /**
   * @brief Confidence-Weighted Averaging.
   *
   * A filter for replicated sensors, i.e. sensors observating the
   * same entity, to increase accuracy and robustness. This method
   * minimizes the variance of the expected of the fused value \cite Elm02
   * The inputs (e.g. sensor values) are weighted and added to
   * the fused output. The weights are calculated out of the variance
   * of the inputs.
   *
   * \note The variance of the input values must not be zero! An
   * exception will be thrown if so. You can set a flag to ignore
   * values with zero variance, see setIgnoreZeroVarianceValues(). So
   * the exception will be avoided but note that values with variance
   * 0 are not taken into account. When all values have zero variance
   * this filter performs simple averaging. 
   * \note Missing measurements are ignored. One should only call
   * estimate() when more than one input value is available, this
   * method makes no sense with a single value, it will be passed to
   * the output.
   * \note As with all other multi-sensor fusion methods, the input
   * values should be measured concurrently to get the best result.
   */
  class ConfidenceWeightedAveraging : public IEstimator
  {
  protected:
    /** @brief Output of this estimation method (value and
     * variance). Size: 1. */
    Output out;

    // -----------------------------------------
    // parameters
    // -----------------------------------------
    /** 
     * @brief Indicates if input values with variance is zero should
     * be ignored, i.e. will not be included into the calculation.
     */
    bool ignoreZeroVarianceValues;

  public:
    /**
     * @brief Constructor of this class.
     *
     * Initializes the output to contain a single default OutputValue.
     */
    ConfidenceWeightedAveraging ();

    /**
     * @brief Destructor of this class.
     */
    ~ConfidenceWeightedAveraging ();

    // -----------------------------------------
    // getters and setters
    // -----------------------------------------
    /**
     * @brief Sets a flag to ignore input values with zero variance.
     *
     * Inputs with zero variance would cause a division by zero
     * exception and the averaging algorithm would not work. Values
     * with zero variance can be ignored when calling this method.
     *
     * \note When all variances are zero, simple averaging (with equal
     * weights) is performed. The variance of the output will be set
     * to zero (to indicate that it is generated by simple averaging).
     */
    void setIgnoreZeroVarianceValues ();

    /**
     * @brief Clears the flag to ignore input values with zero
     * variance.
     *
     * Inputs with zero variance will cause an exception.
     *
     * See also setIgnoreZeroVarianceValues().
     */
    void clearIgnoreZeroVarianceValues ();

    // -----------------------------------------
    // IEstimator implementation
    // -----------------------------------------
    /**
     * @brief Returns an estimate calculated with the given new data.
     */
    virtual Output estimate (Input next);

    /**
     * @brief Returns the last estimated value.
     */
    Output getLastEstimate (void) const;

    /**
     * @brief Prints (debug) information of this filter.
     */
    virtual void serialize(std::ostream& os) const;
  };

}

#endif
